style.
    .form-container {
        width: 350px;
        height: 550px;
        background-color: #fff;
        box-shadow: rgba(0, 0, 0, 0.35) 0px 5px 15px;
        border-radius: 10px;
        box-sizing: border-box;
        padding: 20px 30px;
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
    }

    .title {
        text-align: center;
        font-family: "Lucida Sans", "Lucida Sans Regular", "Lucida Grande",
            "Lucida Sans Unicode", Geneva, Verdana, sans-serif;
        margin: 10px 0 30px 0;
        font-size: 28px;
        font-weight: 800;
    }

    .sub-title {
        margin: 0;
        margin-bottom: 5px;
        font-size: 9px;
        font-family: "Lucida Sans", "Lucida Sans Regular", "Lucida Grande",
            "Lucida Sans Unicode", Geneva, Verdana, sans-serif;
    }

    .form {
        width: 100%;
        display: flex;
        flex-direction: column;
        gap: 18px;
        margin-bottom: 15px;
    }

    .input {
        border-radius: 20px;
        border: 1px solid #c0c0c0;
        outline: 0 !important;
        box-sizing: border-box;
        padding: 12px 15px;
    }

    .form-btn {
        padding: 10px 15px;
        font-family: "Lucida Sans", "Lucida Sans Regular", "Lucida Grande",
            "Lucida Sans Unicode", Geneva, Verdana, sans-serif;
        border-radius: 20px;
        border: 0 !important;
        outline: 0 !important;
        background: teal;
        color: white;
        cursor: pointer;
        box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 8px;
    }

    .form-btn:active {
        box-shadow: none;
    }

    .sign-up-label {
        margin: 0;
        font-size: 10px;
        color: #747474;
        font-family: "Lucida Sans", "Lucida Sans Regular", "Lucida Grande",
            "Lucida Sans Unicode", Geneva, Verdana, sans-serif;
    }

    .sign-up-link {
        margin-left: 1px;
        font-size: 11px;
        text-decoration: underline;
        text-decoration-color: teal;
        color: teal;
        cursor: pointer;
        font-weight: 800;
    }

    .buttons-container {
        width: 100%;
        display: flex;
        flex-direction: column;
        justify-content: flex-start;
        margin-top: 20px;
        gap: 15px;
    }

    .apple-login-button,
        .google-login-button {
        border-radius: 20px;
        box-sizing: border-box;
        padding: 10px 15px;
        box-shadow: rgba(0, 0, 0, 0.16) 0px 10px 36px 0px,
            rgba(0, 0, 0, 0.06) 0px 0px 0px 1px;
        cursor: pointer;
        display: flex;
        justify-content: center;
        align-items: center;
        font-family: "Lucida Sans", "Lucida Sans Regular", "Lucida Grande",
            "Lucida Sans Unicode", Geneva, Verdana, sans-serif;
        font-size: 11px;
        gap: 5px;
    }

    .apple-login-button {
        background-color: #000;
        color: #fff;
        border: 2px solid #000;
    }

    .google-login-button {
        border: 2px solid #747474;
    }

    .apple-icon,
        .google-icon {
        font-size: 18px;
        margin-bottom: 1px;
    }

body
    .form-container
        p.title Login
        form.form(onSubmit="login(event)")
            input#email.input(type="email" placeholder="Email" required)
            input#password.input(type="password" placeholder="Password" required)
            button.form-btn Login
        p.sign-up-label
            | Don't have an account?
            span.sign-up-link(onclick="window.location.href='/register'") Register
        .buttons-container
            // ... Social login buttons as before

    // JavaScript for handling login and redirecting on page load
    script.
        const AUTH_URI = '!{AUTH_URI}';
        const APP_URI = '!{APP_URI}';

        // Function to check token on page load
        async function checkAuthToken() {
            const token = getAuthTokenFromCookies();
            if (token) {
                try {
                    const response = await fetch(AUTH_URI + '/api/auth/validate', {
                        method: 'GET',
                        headers: { 'Authorization': `Bearer ${token}` }
                    });

                    if (response.ok) {
                        // Redirect to authenticated app
                        window.location.href = APP_URI;
                    } else if (response.status === 401) {
                        deleteAuthToken(); // Delete invalid token
                    }
                } catch (error) {
                    console.error('Token validation error:', error);
                }
            }
        }

        // Function to log in and store the token in cookies
        async function login(event) {
            event.preventDefault(); // Prevent form submission
            const email = document.getElementById('email').value;
            const password = document.getElementById('password').value;

            try {
                const response = await fetch(AUTH_URI + '/api/auth/login', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ username: email, password: password })
                });

                if (!response.ok) {
                    throw new Error('Login failed');
                }

                const data = await response.json();
                const token = data.access_token;

                if (token) {
                    // Set token in cookie with expiry, path, and secure flag for production
                    document.cookie = `access_token=${token}; Path=/;`;

                    // Redirect to APP_URI
                    window.location.href = APP_URI;
                }
            } catch (error) {
                console.error('Login error:', error);
                alert('Failed to login. Please check your credentials and try again.');
            }
        }

        // Helper function to get the auth token from cookies
        function getAuthTokenFromCookies() {
            const cookies = document.cookie.split('; ');
            const tokenCookie = cookies.find(cookie => cookie.startsWith('access_token='));
            return tokenCookie ? tokenCookie.split('=')[1] : null;
        }

        // Helper function to delete the auth token cookie
        function deleteAuthToken() {
            document.cookie = 'access_token=; Path=/; Expires=Thu, 01 Jan 1970 00:00:00 UTC;';
        }

        // Check for token on page load
        window.onload = checkAuthToken;
